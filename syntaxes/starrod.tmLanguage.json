{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "star rod",
  "scopeName": "source.starrod",
  "patterns": [
    { "include": "#comment" },
    { "include": "#directive" }
  ],
  "repository": {
    "directive": {
      "patterns": [
        {
          "name": "meta.block.function.starrod",
          "begin": "^@Hook",
          "end": "^[ \t]*$",
          "beginCaptures": {
            "0": { "name": "keyword.operator.at.starrod" }
          },
          "patterns": [
            { "include": "#asm" }
          ]
        },
        {
          "name": "meta.block.data.starrod",
          "begin": "^@Data",
          "end": "^[ \t]*$",
          "beginCaptures": {
            "0": { "name": "keyword.operator.at.starrod" }
          },
          "patterns": [
            { "include": "#expression" },
            { "include": "#comment" }
          ]
        },
        {
          "name": "meta.block.unknown.starrod",
          "begin": "^@",
          "end": "^[ \t]*$",
          "beginCaptures": {
            "0": { "name": "keyword.operator.at.starrod" }
          },
          "patterns": [
            { "include": "#script" },
            { "include": "#asm" }
          ]
        },
        {
          "name": "meta.block.function.starrod",
          "begin": "^(#new):Function(_Init|_GetTattle)?\\b",
          "end": "^[ \t]*$",
          "beginCaptures": {
            "0": { "name": "entity.name.class.starrod" }
          },
          "patterns": [
            { "include": "#asm" }
          ]
        },
        {
          "name": "meta.block.script.starrod",
          "begin": "^(#new):Script(_Main|_Use)?\\b",
          "end": "^[ \t]*$",
          "beginCaptures": {
            "0": { "name": "entity.name.class.starrod" }
          },
          "patterns": [
            { "include": "#script" }
          ]
        },
        {
          "name": "meta.block.dialogue.starrod",
          "begin": "^(#string):([0-9A-Za-z]+):([0-9A-Za-z_\\(\\)]+)",
          "end": "^[ \t]*$",
          "captures": {
            "1": { "name": "entity.name.class.starrod" },
            "2": { "name": "constant.numeric.starrod" },
            "3": { "name": "constant.numeric.starrod" }
          },
          "patterns": [
            { "include": "#dialogue" }
          ]
        },
        {
          "name": "meta.block.dialogue.starrod",
          "begin": "^(#string)\\s+(\\$[^\\s]+)",
          "end": "^[ \t]*$",
          "captures": {
            "1": { "name": "entity.name.class.starrod" },
            "2": { "name": "variable.name.starrod" }
          },
          "patterns": [
            {
              "include": "#dialogue"
            }
          ]
        },
        {
          "name": "meta.block.other.starrod",
          "begin": "^(#new):(EntryList|ExtraAnimationList|Header|AISettings|NpcSettings|NpcGroup|NpcGroupList|ASCII|ConstDouble|Unknown|JumpTable|IntTable|FloatTable|ItemList|TriggerCoord|LavaResetList|ByteTable|ShopInventory|ShopItemPositions|ShopPriceList|ShopOwnerNPC|NpcList|VertexList|DisplayList|VectorList|TreeModelList|TreeDropList|ShakeTreeEvent|TreeEffectVectors|ShortTable|DataTable|SearchBushEvent|BadgeShopInventory|TweesterPath|TweesterPathList|Formation|FormationTable|StageTable|DefenseTable|StatusTable|Actor|IdleAnimations|SpriteTable|Stage|ForegroundModelList|SJIS|SpecialFormation|Vector3D|DmaArgTable)+\\b",
          "end": "^[ \t]*$",
          "beginCaptures": {
            "0": { "name": "entity.name.class.starrod" }
          },
          "patterns": [
            { "include": "#expression" },
            { "include": "#comment" }
          ]
        },
        {
          "begin": "^(#define|#reserve|#export|#delete)\\s",
          "end": "$",
          "beginCaptures": {
            "1": { "name": "keyword.control.directive.starrod" }
          },
          "patterns": [
            { "include": "#expression" },
            { "include": "#comment" }
          ]
        },
        {
          "begin": "^(#import)\\s",
          "end": "$",
          "beginCaptures": {
            "1": { "name": "keyword.control.directive.starrod" }
          },
          "patterns": [
            { "include": "#comment" }
          ]
        },
        {
          "name": "invalid.deprecated.space.starrod",
          "begin": "^(MISSING|PADDING):",
          "end": "^[ \t]*\n",
          "patterns": [
            { "include": "#number" }
          ]
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.line.documentation.starrod",
          "begin": "%%",
          "end": "\n",
          "patterns": [
            {
              "name": "keyword.codetag.notation.starrod",
              "match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO|TEMP)\\b)"
            }
          ]
        },
        {
          "name": "comment.line.double-slash.starrod",
          "begin": "%",
          "end": "\n",
          "patterns": [
            {
              "name": "keyword.codetag.notation.starrod",
              "match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO|TEMP)\\b)"
            }
          ]
        },
        {
          "name": "comment.block.block.starrod",
          "begin": "/%",
          "end": "%/",
          "patterns": [
            {
              "name": "keyword.codetag.notation.starrod",
              "match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO|TEMP)\\b)"
            }
          ]
        }
      ]
    },
    "asm": {
      "patterns": [
        {
          "name": "keyword.control.directive.starrod",
          "match": "(\\b|^)#(UN)?DEF\\b"
        },
        {
          "name": "constant.language.zero.starrod",
          "match": "\\b(r0|R0)\\b"
        },
        {
          "name": "keyword.control.starrod",
          "match": "\\b(ra|RA|sp|SP)\\b"
        },
        {
          "name": "constant.language.boolean.starrod",
          "match": "\\b(((a|A)[0-3])|((v|V)[0-1])|((t|T)[0-9])|((s|S)[0-8])|((k|K)[0-1])|gp|GP|fp|FP|F[1-2]?[0-9]|f[1-2]?[0-9])\\b"
        },
        {
          "name": "keyword.mnemonic.starrod",
          "match": "^[ \t]*[A-Z]{1,3}[A-Z0-9.]*\\b"
        },
        { "include": "#expression" },
        { "include": "#comment" }
      ]
    },
    "script": {
      "patterns": [
        {
          "name": "italic",
          "match": "^[ \t]*(Call|Exec|ExecWait)\\b"
        },
        {
          "name": "keyword.control.starrod",
          "match": "^[ \t]*(Return|End|Label|Goto|Jump|Loop|EndLoop|BreakCase|BreakLoop|If|Else|EndIf|Switch|SwitchConst|Case|Default|CaseOR|CaseAND|EndCaseGroup|to|EndSwitch|Thread|EndThread|ChildThread|EndChildThread)\\b"
        },
        {
          "name": "keyword.mnemonic.starrod",
          "match": "^[ \t]*(Wait|WaitSeconds|Set|SetConst|SetF|Add|Sub|Mul|Div|Mod|AddF|SubF|MulF|DivF|UseIntBuffer|Get[1-4]Int|GetIntN|UseFloatBuffer|Get[1-4]Float|GetFloatN|UseArray|UseFlags|NewArray|AND|ConstAND|OR|ConstOR|Bind|Unbind|SetPriority|SetTimescale|SetGroup|BindLock|SuspendAll|ResumeAll|SuspendOthers|ResumeOthers|Suspend|Resume|Kill|DoesScriptExist|PrintVar)\\b"
        },
        { "include": "#expression" },
        { "include": "#comment" }
      ]
    },
    "dialogue": {
      "patterns": [
        {
          "name": "constant.character.escape.starrod",
          "match": "\\\\."
        },
        {
          "name": "support.type.starrod",
          "match": "\\[(STYLE):(RIGHT|LEFT|CENTER|TATTLE|CHOICE|INSPECT|SIGN|LAMPPOST|POPUP|POSTCARD|UPGRADE|NARRATE|EPILOGUE)\\]"
        },
        {
          "name": "keyword.other.starrod",
          "match": "\\[(END|WAIT|NEXT|PAUSE|\\.\\.\\.)\\]"
        },
        {
          "name": "constant.language.boolean.starrod",
          "match": "\\[(A|B|L|R|Z|C-UP|C-DOWN|C-LEFT|C-DOWN|C-UP|C-RIGHT|START|UP|DOWN|LEFT|RIGHT|NOTE|HEART|STAR|CIRCLE|CROSS)\\]"
        },
        {
          "name": "storage.type.expansion.starrod",
          "match": "{[^}]+}"
        },
        { "include": "#comment" }
      ]
    },

    "expression": {
      "patterns": [
        {
          "name": "variable.interpolation",
          "match": "{[^}]+}"
        },
        { "include": "#identifier" },
        { "include": "#number" },
        { "include": "#string" },
        {
          "name": "keyword.operator.starrod",
          "match": "\\+"
        },
        {
          "name": "keyword.operator.starrod",
          "match": "-"
        },
        {
          "name": "keyword.operator.starrod",
          "match": "\\*"
        },
        {
          "name": "keyword.operator.starrod",
          "match": "/[^%]"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "match": "\\.(True|False|Default)",
          "captures": {
            "1": { "name": "constant.language.boolean.starrod" }
          }
        },
        {
          "match": "\\.(\\S+):(\\S+)",
          "captures": {
            "1": { "name": "constant.language.starrod" },
            "2": { "name": "constant.language.starrod" }
          }
        },
        {
          "match": "\\.(\\S+)",
          "captures": {
            "1": { "name": "constant.other.starrod" }
          }
        },
        {
          "match": "(\\*)([^\\s\\[]+)\\[([^\\]]+)\\]",
          "captures": {
            "1": { "name": "keyword.operator.starrod" },
            "2": { "name": "variable.object.starrod" },
            "3": { "name": "constant.numeric.starrod" }
          }
        },
        {
          "match": "(\\*)([^\\s\\[]+)",
          "captures": {
            "1": { "name": "keyword.operator.starrod" }
          }
        },
        {
          "name": "variable.name.starrod",
          "match": "\\$[^\\s\\[]+"
        },
        {
          "match": "^\\s*(\\[[a-zA-Z0-9]+\\])\\s",
          "captures": {
            "0": { "name": "constant.other.starrod" }
          }
        },
        {
          "name": "constant.numeric.starrod",
          "match": "^\\s*[a-zA-Z0-9]+\\:"
        },
        {
          "begin": "\\[",
          "end": "\\]",
          "patterns": [
            { "include": "#identifier" },
            {
              "name": "constant.numeric",
              "match": "(-)?[0-9a-fA-F]+(\\.[0-9]+)?(`)?(b|s)?"
            }
          ]
        },
        {
          "name": "keyword.operator.starrod",
          "match": "\\b\\*"
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.float.starrod",
          "match": "(\\b|-)-?[0-9]+\\.[0-9]+\\b"
        },
        {
          "name": "constant.numeric.decimal.starrod",
          "match": "(\\b|-)[0-9]+`(b|s)?\\b"
        },
        {
          "name": "constant.numeric.binary.starrod",
          "match": "(\\b|-)-?[0-1]+(b|s)?\\b"
        },
        {
          "name": "constant.numeric.hexadecimal.starrod",
          "match": "(\\b|-)-?[0-9A-Fa-f]+(b|s)?\\b"
        }
      ]
    },
    "string": {
      "name": "string.quoted.double.starrod",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.starrod",
          "match": "\\."
        }
      ]
    }
  }
}
