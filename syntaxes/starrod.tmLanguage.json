{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "star rod",
  "scopeName": "source.starrod",
  "patterns": [
    { "include": "#comment" },
    { "include": "#directive" }
  ],
  "repository": {
    "directive": {
      "patterns": [
        {
          "name": "meta.block.function.patch.starrod",
          "begin": "((@)Hook((:)(Global|Map|Battle|World))?)\\s+([0-9A-F]{1,8})\\s*({|(?=%)|$)",
          "end": "(?=#[^DU])|(?=@)|(})",
          "endCaptures": {
            "3": { "name": "punctuation.definition.end.bracket.curly.starrod" }
          },
          "beginCaptures": {
            "1": { "name": "storage.type.function.hook.starrod" },
            "2": { "name": "punctuation.at.starrod" },
            "4": { "name": "punctuation.separator.starrod" },
            "6": { "name": "constant.numeric.hexadecimal.offset.starrod" }
          },
          "patterns": [
            { "include": "#asm" },
            {
              "name": "punctuation.definition.start.bracket.curly.starrod",
              "match": "^\\s*{\\s*((?=%)|$)"
            }
          ]
        },
        {
          "name": "meta.block.other.data.patch.starrod",
          "begin": "((@)Data((:)(Global|Map|Battle|World))?)\\s+([0-9A-F]{1,8})\\s*({|(?=%)|$)",
          "end": "(?=#)|(?=@)|(})",
          "endCaptures": {
            "3": { "name": "punctuation.definition.end.bracket.curly.starrod" }
          },
          "beginCaptures": {
            "1": { "name": "storage.type.data.starrod" },
            "2": { "name": "punctuation.at.starrod" },
            "4": { "name": "punctuation.separator.starrod" },
            "6": { "name": "constant.numeric.hexadecimal.offset.starrod" }
          },
          "patterns": [
            { "include": "#data" },
            {
              "name": "punctuation.definition.start.bracket.curly.starrod",
              "match": "^\\s*{\\s*((?=%)|$)"
            }
          ]
        },
        {
          "name": "meta.block.function.patch.starrod",
          "begin": "((@)Function((:)(Global|Map|Battle|World))?)\\s+([0-9A-F]{1,8})\\s*({|(?=%)|$)",
          "end": "(?=#[^DU])|(?=@)|(})",
          "endCaptures": {
            "3": { "name": "punctuation.definition.end.bracket.curly.starrod" }
          },
          "beginCaptures": {
            "1": { "name": "storage.type.function.patch.starrod" },
            "2": { "name": "punctuation.at.starrod" },
            "4": { "name": "punctuation.separator.starrod" },
            "6": { "name": "constant.numeric.hexadecimal.offset.starrod" }
          },
          "patterns": [
            { "include": "#asm" },
            {
              "name": "punctuation.definition.start.bracket.curly.starrod",
              "match": "^\\s*{\\s*((?=%)|$)"
            }
          ]
        },
        {
          "name": "meta.block.script.patch.starrod",
          "begin": "((@)Script((:)(Global|Map|Battle|World))?)\\s+([0-9A-F]{1,8})\\s*({|(?=%)|$)",
          "end": "(?=#[^DU])|(?=@)|(})",
          "endCaptures": {
            "3": { "name": "punctuation.definition.end.bracket.curly.starrod" }
          },
          "beginCaptures": {
            "1": { "name": "storage.type.script.patch.starrod" },
            "2": { "name": "punctuation.at.starrod" },
            "4": { "name": "punctuation.separator.starrod" },
            "6": { "name": "constant.numeric.hexadecimal.offset.starrod" }
          },
          "patterns": [
            { "include": "#script" },
            {
              "name": "punctuation.definition.start.bracket.curly.starrod",
              "match": "^\\s*{\\s*((?=%)|$)"
            }
          ]
        },
        {
          "name": "meta.block.unknown.patch.starrod",
          "begin": "(@)\\s+((\\$)[^ \t:]+((:)[^ \t:]+)*)(\\s*({|(?=%)|$))",
          "end": "(?=#[^DU])|(?=@)|(})",
          "endCaptures": {
            "3": { "name": "punctuation.definition.end.bracket.curly.starrod" }
          },
          "beginCaptures": {
            "0": { "name": "meta.head.unknown.patch.starrod" },
            "1": { "name": "punctuation.at.starrod" },
            "2": { "name": "entity.name.definition.unknown.starrod" },
            "3": { "name": "punctuation.definition.variable.starrod" },
            "5": { "name": "punctuation.separator.namespace.access.starrod" }
          },
          "patterns": [
            { "include": "#script" },
            { "include": "#asm" },
            { "include": "#data" },
            {
              "name": "punctuation.definition.start.bracket.curly.starrod",
              "match": "^\\s*{\\s*((?=%)|$)"
            }
          ]
        },
        {
          "name": "meta.block.function.starrod",
          "begin": "((#)new)(:)(Function(_Init|_GetTattle)?)\\s+((\\$)[^ \t$#/%:\\(\\[]+((:)[^ \t$#/%\\(\\[]+)?)\\b(\\s*({|(?=%)|$))",
          "end": "(?=#[^DU])|(?=@)|(})",
          "beginCaptures": {
            "0": { "name": "meta.head.function.definition.starrod" },
            "1": { "name": "storage.modifier.new.starrod" },
            "2": { "name": "punctuation.definition.directive.starrod" },
            "3": { "name": "punctuation.separator.starrod" },
            "4": { "name": "storage.type.function.starrod" },
            "6": { "name": "entity.name.function.definition.starrod" },
            "7": { "name": "punctuation.definition.variable.starrod" },
            "9": { "name": "punctuation.separator.namespace.access.starrod" },
            "10": { "name": "punctuation.definition.begin.bracket.curly.starrod" }
          },
          "endCaptures": {
            "3": { "name": "punctuation.definition.end.bracket.curly.starrod" }
          },
          "patterns": [
            { "include": "#asm" }
          ]
        },
        {
          "name": "meta.block.script.starrod",
          "begin": "((#)new)(:)(Script(_Main|_Use|(:)(Global|Map|Battle))?)\\s+((\\$)[^ \t$#/%:\\(\\[]+((:)[^ \t$#/%\\(\\[]+)?)\\b(\\s*({|(?=%)|$))",
          "end": "(?=#)|(?=@)|(})",
          "beginCaptures": {
            "0": { "name": "meta.head.script.definition.starrod" },
            "1": { "name": "storage.modifier.new.starrod" },
            "2": { "name": "punctuation.definition.directive.starrod" },
            "3": { "name": "punctuation.separator.starrod" },
            "4": { "name": "storage.type.script.starrod" },
            "6": { "name": "punctuation.separator.starrod" },
            "8": { "name": "entity.name.script.definition.starrod" },
            "9": { "name": "punctuation.definition.variable.starrod" },
            "11": { "name": "punctuation.separator.namespace.access.starrod" },
            "12": { "name": "punctuation.definition.begin.bracket.curly.starrod" }
          },
          "endCaptures": {
            "3": { "name": "punctuation.definition.begin.bracket.curly.starrod" }
          },
          "patterns": [
            { "include": "#script" },
            {
              "name": "punctuation.definition.start.bracket.curly.starrod",
              "match": "^\\s*{\\s*((?=%)|$)"
            }
          ]
        },
        {
          "name": "meta.block.string.starrod",
          "begin": "((#)string)(:)([0-9A-Fa-f]{2})(:)([0-9A-Fa-f]{3})(\\s*({|(?=%)|$))",
          "end": "(?=#)|(?=@)|((\\[)(END)(\\]))\\s*(})?",
          "beginCaptures": {
            "0": { "name": "meta.head.string.definition.by-id.starrod" },
            "1": { "name": "storage.type.string.starrod" },
            "2": { "name": "punctuation.definition.directive.starrod" },
            "3": { "name": "punctuation.separator.starrod" },
            "4": { "name": "constant.numeric.starrod" },
            "5": { "name": "punctuation.separator.starrod" },
            "6": { "name": "constant.numeric.starrod" },
            "7": { "name": "punctuation.definition.begin.bracket.curly.starrod" }
          },
          "endCaptures": {
            "1": { "name": "keyword.control.string.end.starrod" },
            "2": { "name": "punctuation.definition.begin.bracket.square.starrod" },
            "4": { "name": "punctuation.definition.end.bracket.square.starrod" },
            "5": { "name": "punctuation.definition.end.bracket.curly.starrod" }
          },
          "patterns": [
            { "include": "#dialogue" },
            {
              "name": "punctuation.definition.start.bracket.curly.starrod",
              "match": "^\\s*{\\s*((?=%)|$)"
            }
          ]
        },
        {
          "name": "meta.block.string.starrod",
          "begin": "((#)string)(:)([0-9A-Fa-f]{2})(:)(\\()([^\\(]+)(\\))(\\s*({|(?=%)|$))",
          "end": "(?=#)|(?=@)|((\\[)(END)(\\]))\\s*(})?",
          "beginCaptures": {
            "0": { "name": "meta.head.string.definition.by-name.starrod" },
            "1": { "name": "storage.type.string.starrod" },
            "2": { "name": "punctuation.definition.directive.starrod" },
            "3": { "name": "punctuation.separator.starrod" },
            "4": { "name": "constant.numeric.starrod" },
            "5": { "name": "punctuation.separator.starrod" },
            "6": { "name": "punctuation.section.parameters.begin.bracket.round.starrod" },
            "7": { "name": "entity.name.string.definition.starrod" },
            "8": { "name": "punctuation.section.parameters.end.bracket.round.starrod" },
            "9": { "name": "punctuation.definition.begin.bracket.curly.starrod" }
          },
          "endCaptures": {
            "1": { "name": "keyword.control.string.end.starrod" },
            "2": { "name": "punctuation.definition.begin.bracket.square.starrod" },
            "4": { "name": "punctuation.definition.end.bracket.square.starrod" },
            "5": { "name": "punctuation.definition.end.bracket.curly.starrod" }
          },
          "patterns": [
            { "include": "#dialogue" },
            {
              "name": "punctuation.definition.start.bracket.curly.starrod",
              "match": "^\\s*{\\s*((?=%)|$)"
            }
          ]
        },
        {
          "name": "meta.block.string.starrod",
          "begin": "((#)string)\\s+((\\$)[^ \t$#/%:\\(\\[]+((:)[^^ \t$#/%\\(\\[]+)?)\\b(\\s*({|(?=%)|$))",
          "end": "(?=#)|(?=@)|((\\[)(END)(\\]))\\s*(})?",
          "beginCaptures": {
            "0": { "name": "meta.head.string.definition.by-pointer.starrod" },
            "1": { "name": "storage.type.string.starrod" },
            "2": { "name": "punctuation.definition.directive.starrod" },
            "3": { "name": "entity.name.string.definition.starrod" },
            "4": { "name": "punctuation.definition.variable.starrod" },
            "6": { "name": "punctuation.separator.namespace.access.starrod" },
            "7": { "name": "punctuation.definition.begin.bracket.curly.starrod" }
          },
          "endCaptures": {
            "1": { "name": "keyword.control.string.end.starrod" },
            "2": { "name": "punctuation.definition.begin.bracket.square.starrod" },
            "4": { "name": "punctuation.definition.end.bracket.square.starrod" },
            "5": { "name": "punctuation.definition.end.bracket.curly.starrod" }
          },
          "patterns": [
            { "include": "#dialogue" },
            {
              "name": "punctuation.definition.start.bracket.curly.starrod",
              "match": "^\\s*{\\s*((?=%)|$)"
            }
          ]
        },
        {
          "name": "meta.block.other.starrod",
          "begin": "((#)new)(:)(EntryList|ExtraAnimationList|Header|AISettings|NpcSettings|NpcGroup|NpcGroupList|ASCII|ConstDouble|Unknown|JumpTable|IntTable|FloatTable|ItemList|TriggerCoord|LavaResetList|ByteTable|ShopInventory|ShopItemPositions|ShopPriceList|ShopOwnerNPC|NpcList|VertexList|DisplayList|VectorList|TreeModelList|TreeDropList|ShakeTreeEvent|TreeEffectVectors|ShortTable|DataTable|SearchBushEvent|BadgeShopInventory|TweesterPath|TweesterPathList|Formation|FormationTable|StageTable|DefenseTable|StatusTable|Actor|IdleAnimations|SpriteTable|PartsTable|Stage|ForegroundModelList|SJIS|SpecialFormation|Vector3D|DmaArgTable|Data)\\s+((\\$)[^ \t$#/%:\\(\\[]+((:)[^ \t$#/%\\(\\[]+)?)\\b(\\s*({|(?=%)|$))",
          "end": "(?=#)|(?=@)|(})",
          "endCaptures": {
            "3": { "name": "punctuation.definition.end.bracket.curly.starrod" }
          },
          "beginCaptures": {
            "1": { "name": "storage.modifier.new.starrod" },
            "2": { "name": "punctuation.definition.directive.starrod" },
            "3": { "name": "punctuation.separator.starrod" },
            "4": { "name": "storage.type.other.starrod" },
            "5": { "name": "entity.name.other.definition.starrod" },
            "6": { "name": "punctuation.definition.variable.starrod" },
            "8": { "name": "punctuation.separator.namespace.access.starrod" }
          },
          "patterns": [
            { "include": "#data" },
            {
              "name": "punctuation.definition.start.bracket.curly.starrod",
              "match": "^\\s*{\\s*((?=%)|$)"
            }
          ]
        },
        {
          "begin": "((@)Fill)\\s",
          "end": "((?=%)|$)",
          "beginCaptures": {
            "1": { "name": "keyword.control.directive.starrod" },
            "2": { "name": "punctuation.at.starrod" }
          },
          "patterns": [
            { "include": "#expression" },
            { "include": "#comment" }
          ]
        },
        {
          "begin": "((#)(reserve|export|delete))\\s",
          "end": "((?=%)|$)",
          "beginCaptures": {
            "1": { "name": "keyword.control.directive.starrod" },
            "2": { "name": "punctuation.definition.directive.starrod" }
          },
          "patterns": [
            { "include": "#expression" },
            { "include": "#comment" }
          ]
        },
        {
          "begin": "(#define)\\s((\\.)[^ \t$#/%\\(\\[]+)\\s",
          "end": "$",
          "beginCaptures": {
            "0": { "name": "meta.preprocessor.starrod" },
            "1": { "name": "keyword.control.directive.define.starrod" },
            "2": { "name": "entity.name.constant.preprocessor.starrod" },
            "3": { "name": "punctuation.separator.dot-access.starrod" }
          },
          "patterns": [
            { "include": "#expression" },
            { "include": "#comment" }
          ]
        },
        {
          "begin": "(#import)\\s",
          "end": "$",
          "beginCaptures": {
            "1": { "name": "keyword.control.directive.import.starrod" }
          },
          "contentName": "entity.name.file.starrod",
          "patterns": [
            { "include": "#comment" }
          ]
        },
        {
          "name": "invalid.empty-space.starrod",
          "begin": "^\\s*(MISSING|PADDING):",
          "end": "^[ \t]*\n",
          "patterns": [
            { "include": "#number" }
          ]
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.line.percentage.documentation.starrod",
          "begin": "%%",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.comment.starrod" }
          },
          "end": "\n",
          "patterns": [
            {
              "name": "keyword.codetag.notation.starrod",
              "match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO|TEMP)\\b)"
            }
          ]
        },
        {
          "name": "comment.line.percentage.starrod",
          "begin": "%",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.comment.starrod" }
          },
          "end": "\n",
          "patterns": [
            {
              "name": "keyword.codetag.notation.starrod",
              "match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO|TEMP)\\b)"
            }
          ]
        },
        {
          "name": "comment.block.percentage.starrod",
          "begin": "/%",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.comment.begin.starrod" }
          },
          "end": "%/",
          "endCaptures": {
            "0": { "name": "punctuation.definition.comment.end.starrod" }
          },
          "patterns": [
            {
              "name": "keyword.codetag.notation.starrod",
              "match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO|TEMP)\\b)"
            }
          ]
        }
      ]
    },
    "asm": {
      "comment": "Loosely based on vscode-Better-MIPS. Instructions grouped/sourced from https://www.zophar.net/fileuploads/2/10655uytsm/N64ops03.txt, plus Star Rod pseudoinstructions.",
      "patterns": [
        {
          "match": "^\\s*([0-9A-Fa-f]+(:)\\s*)?(LB|LBU|LD|LDL|LDR|LH|LHU|LL|LLD|LW|LWL|LWL|LWR|LWU|LUI|LWC1|LIA|LIO|LIF|LAB|LABU|LAH|LAHU|LAW|LAF|LAD|LTB|LTBU|LTH|LTHU|LTW|LTF)\\b",
          "captures": {
            "1": { "name": "constant.numeric.hexadecimal.offset.starrod" },
            "2": { "name": "punctuation.separator.label.starrod" },
            "3": { "name": "support.function.registers.load.mips.starrod" }
          }
        },
        {
          "match": "^\\s*([0-9A-Fa-f]+(:)\\s*)?(SB|SC|SCD|SD|SDL|SDR|SH|SW|SWL|SWR|SWC1|SYNC|SAB|SAH|SAW|SAF|STB|STH|STW|STF)\\b",
          "captures": {
            "1": { "name": "constant.numeric.hexadecimal.offset.starrod" },
            "2": { "name": "punctuation.separator.label.starrod" },
            "3": { "name": "support.function.registers.store.mips.starrod" }
          }
        },
        {
          "match": "^\\s*([0-9A-Fa-f]+(:)\\s*)?(ABS\\.[SD]|ADD\\.[SD]|C\\.(F|UN|EQ|UEQ|OLT|ULT|OLE|ULE|SF|NGLE|SEQ|NGL|LT|NGE|LE|NGT)\\.[SD]|CEIL\\.[LW]\\.[SD]|CFC1|CTC1|CVT\\.[DLSW]\\.[DLSW]|DIV\\.[SD]|DMFC1|DMTC1|FLOOR\\.[LW]\\.[SD]|LDC1|LWC1|MFC1|MOV\\.[SD]|MTC1|MUL\\.[SD]|NEG\\.[SD]|ROUND\\.[LW]\\.[SD]|SDC1|SQRT\\.[SD]|SUB\\.[SD]|SWC1|TRUNC\\.[LW]\\.[SD]|ADD|ADDI|ADDIU|ADDU|AND|ANDI|DADD|DADDI|DADDIU|DADDU|DDIV|DDIVU|DMULT|DMULTU|DSLL|DSLL32|DSLLV|DSRA|DSRA32|DSRAV|DSRL|DSRL32|DSRLV|DSUB|DSUBU|MFHI|MFLO|MTHI|MTLO|MULT|MUTLU|NOR|OR|ORI|SLL|SLLV|SLT|SLTI|SLTIU|SLTU|SRA|SRAV|SRL|SRLV|SUB|SUBU|XOR|XORI|SUBI|SUBIU|COPY|CLEAR)\\b",
          "captures": {
            "1": { "name": "constant.numeric.hexadecimal.offset.starrod" },
            "2": { "name": "punctuation.separator.label.starrod" },
            "3": { "name": "support.function.arithmetic.mips.starrod" }
          }
        },
        {
          "match": "^\\s*([0-9A-Fa-f]+(:)\\s*)?(NOP|RESERVED)\\b",
          "captures": {
            "1": { "name": "constant.numeric.hexadecimal.offset.starrod" },
            "2": { "name": "punctuation.separator.label.starrod" },
            "3": { "name": "support.function.no-op.mips.starrod" }
          }
        },
        {
          "match": "^\\s*([0-9A-Fa-f]+(:)\\s*)?(JR|JPOP|PUSH|POP|(B|J)(((EQ|NE|GE|GT|LE|LE)Z?|C1F|C1T)?(ALR?)?L?)?)\\b",
          "captures": {
            "1": { "name": "constant.numeric.hexadecimal.offset.starrod" },
            "2": { "name": "punctuation.separator.label.starrod" },
            "3": { "name": "support.function.jumps.mips.starrod" }
          }
        },
        {
          "match": "^\\s*([0-9A-Fa-f]+(:)\\s*)?(BREAK|SYSCALL|TEQ|TEQI|TGE|TGEI|TLT|TLTI|TLTIU|TLTU|TNE|TNEI|CACHE|ERET|TLBP|TLBR|TLBWI|TLBWR)\\b",
          "captures": {
            "1": { "name": "constant.numeric.hexadecimal.offset.starrod" },
            "2": { "name": "punctuation.separator.label.starrod" },
            "3": { "name": "support.function.system.mips.starrod" }
          }
        },
        {
          "name": "keyword.control.directive.starrod",
          "match": "^\\s*(#)(DEF|UNDEF|def|undef)\\b",
          "captures": {
            "1": { "name": "punctuation.definition.directive.starrod" }
          }
        },
        {
          "name": "keyword.control.loop.starrod",
          "match": "^\\s*(LOOP|ENDLOOP|loop|endloop)\\b"
        },
        {
          "name": "variable.other.register.usable.by-name.general.mips.starrod",
          "match": "([tT][0-9]|[sS][0-8])\\b"
        },
        {
          "name": "variable.other.register.usable.by-name.stack.mips.starrod",
          "match": "(sp|SP)\\b"
        },
        {
          "name": "variable.other.register.usable.by-name.mips.starrod",
          "match": "([rR]0|[vV][01]|[aA][0-3]|gp|GP|fp|FP|ra|RA|at|AT)\\b"
        },
        {
          "name": "variable.other.register.usable.floating-point.mips.starrod",
          "match": "[fF]([0-9]|1[0-9]|2[0-9]|3[0-1])\\b"
        },
        {
          "name": "entity.name.label.starrod",
          "match": "(\\.)([^ \t$#/%\\(\\[]+)\\b",
          "captures": {
            "1": { "name": "punctuation.separator.dot-access.starrod" }
          }
        },
        {
          "name": "punctuation.starrod",
          "match": "[,()]"
        },
        { "include": "#expression" },
        { "include": "#comment" }
      ]
    },
    "script": {
      "patterns": [
        {
          "begin": "^[ \t]*([0-9A-Fa-f]+(:)\\s*)?(Call)\\s+(([^ \t$#/%:\\(\\[]+)|((\\$)[^ \t$#/%:\\(\\[]+((:)[^ \t$#/%\\(\\[]+)?)((\\[)([0-9A-Fa-f]+)(\\]))?)\\s*(\\()?",
          "beginCaptures": {
            "0": { "name": "meta.function.call.starrod" },
            "1": { "name": "constant.numeric.hexadecimal.offset.starrod" },
            "2": { "name": "punctuation.separator.label.starrod" },
            "3": { "name": "keyword.control.call.starrod" },
            "4": { "name": "entity.name.function.call.starrod" },
            "5": { "name": "support.function.starrod" },
            "7": { "name": "punctuation.variable.starrod" },
            "9": { "name": "punctuation.separator.namespace.access.starrod" },
            "10": { "name": "meta.bracket.square.access.starrod" },
            "11": { "name": "punctuation.definition.begin.bracket.square.starrod" },
            "12": { "name": "constant.numeric.hexadecimal" },
            "13": { "name": "punctuation.definition.end.bracket.square.starrod" },
            "14": { "name": "punctuation.section.arguments.begin.bracket.round.function.call.starrod" }
          },
          "end": "(\\))|$",
          "endCaptures": {
            "1": { "name": "punctuation.section.arguments.end.bracket.round.function.call.starrod" }
          },
          "patterns": [
            { "include": "#expression" },
            { "include": "#comment" }
          ]
        },
        {
          "begin": "^[ \t]*([0-9A-Fa-f]+(:)\\s*)?(Exec|ExecWait|Jump)\\s+(([^ \t$#/%:\\(\\[]+)|((\\$)[^ \t$#/%:\\(\\[]+((:)[^ \t$#/%\\(\\[]+)?)((\\[)([0-9A-Fa-f]+)(\\]))?)\\s*",
          "beginCaptures": {
            "0": { "name": "meta.script.exec.starrod" },
            "1": { "name": "constant.numeric.hexadecimal.offset.starrod" },
            "2": { "name": "punctuation.separator.label.starrod" },
            "3": { "name": "keyword.control.exec.starrod" },
            "4": { "name": "entity.name.script.exec.starrod" },
            "5": { "name": "support.script.starrod" },
            "7": { "name": "punctuation.variable.starrod" },
            "9": { "name": "punctuation.separator.namespace.access.starrod" },
            "10": { "name": "meta.bracket.square.access.starrod" },
            "11": { "name": "punctuation.definition.begin.bracket.square.starrod" },
            "12": { "name": "constant.numeric.hexadecimal" },
            "13": { "name": "punctuation.definition.end.bracket.square.starrod" }
          },
          "end": "$",
          "patterns": [
            { "include": "#expression" },
            { "include": "#comment" }
          ]
        },
        {
          "match": "^[ \t]*(([0-9A-Fa-f]+)(:)\\s*)?(Return|End|Label|Goto|Loop|EndLoop|BreakCase|BreakLoop|If|Else|EndIf|Switch|SwitchConst|Case|Default|CaseOR|CaseAND|EndCaseGroup|EndSwitch|Thread|EndThread|ChildThread|EndChildThread|Wait|WaitSeconds)\\b",
          "captures": {
            "2": { "name": "constant.numeric.offset.starrod" },
            "3": { "name": "punctuation.separator.label.starrod" },
            "4": { "name": "keyword.control.starrod" }
          }
        },
        {
          "match": "^[ \t]*([0-9A-Fa-f]+(:)\\s*)?(UseIntBuffer|Get[1-4]Int|GetIntN|UseFloatBuffer|Get[1-4]Float|GetFloatN|UseArray|UseFlags|NewArray|Bind|Unbind|SetPriority|SetTimescale|SetGroup|BindLock|SuspendAll|ResumeAll|SuspendOthers|ResumeOthers|Suspend|Resume|Kill|DoesScriptExist|PrintVar)\\b",
          "captures": {
            "1": { "name": "constant.numeric.hexadecimal.offset.starrod" },
            "2": { "name": "punctuation.separator.label.starrod" },
            "3": { "name": "keyword.other.starrod" }
          }
        },
        {
          "begin": "^[ \t]*([0-9A-Fa-f]+(:)\\s*)?(Set|SetConst|SetF)\\s+",
          "beginCaptures": {
            "1": { "name": "constant.numeric.hexadecimal.offset.starrod" },
            "2": { "name": "punctuation.separator.label.starrod" },
            "3": { "name": "storage.type.starrod" }
          },
          "end": "$|(?=%)",
          "patterns": [
            { "include": "#set_expression" }
          ]
        },
        {
          "match": "^[ \t]*([0-9A-Fa-f]+(:)\\s*)?(Add|Sub|Mul|Div|Mod|AddF|SubF|MulF|DivF)\\b",
          "captures": {
            "1": { "name": "constant.numeric.hexadecimal.offset.starrod" },
            "2": { "name": "punctuation.separator.label.starrod" },
            "3": { "name": "keyword.operator.arithmetic.starrod" }
          }
        },
        {
          "match": "^[ \t]*([0-9A-Fa-f]+(:)\\s*)?(AND|ConstAND|OR|ConstOR)\\b",
          "captures": {
            "1": { "name": "constant.numeric.hexadecimal.offset.starrod" },
            "2": { "name": "punctuation.separator.label.starrod" },
            "3": { "name": "keyword.operator.bitwise.starrod" }
          }
        },
        {
          "name": "keyword.operator.logical.starrod",
          "match": "(==|!=|>|>=|<|<=|\\bto\\b|=)"
        },
        { "include": "#expression" },
        { "include": "#comment" }
      ]
    },
    "dialogue": {
      "patterns": [
        {
          "name": "constant.character.escape.starrod",
          "match": "\\\\."
        },
        {
          "name": "support.type.style.starrod",
          "begin": "(\\[)(STYLE)(:)(RIGHT|LEFT|CENTER|TATTLE|CHOICE|INSPECT|SIGN|LAMPPOST|POPUP|POSTCARD|UPGRADE|NARRATE|EPILOGUE)",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.begin.bracket.square.starrod" },
            "3": { "name": "punctuation.separator.colon.starrod" }
          },
          "patterns": [
            {
              "match": "(:)([0-9A-Fa-f]+)",
              "captures": {
                "1": { "name": "punctuation.separator.colon.starrod" },
                "2": { "name": "constant.numeric.hexadecimal.starrod" }
              }
            },
            {
              "name": "invalid",
              "match": "[^\\]]"
            }
          ],
          "end": "(\\])",
          "endCaptures": {
            "0": { "name": "punctuation.definition.end.bracket.square.starrod" }
          }
        },
        {
          "name": "keyword.control.starrod",
          "match": "(\\[)(WAIT|NEXT|PAUSE(:)([0-9A-Fa-f]+))(\\])",
          "captures": {
            "1": { "name": "punctuation.definition.begin.bracket.square.starrod" },
            "3": { "name": "punctuation.separator.colon.starrod" },
            "4": { "name": "constant.numeric.hexadecimal.starrod" },
            "5": { "name": "punctuation.definition.end.bracket.square.starrod" }
          }
        },
        {
          "name": "constant.character.escape.line-continuation.starrod",
          "match": "(\\[)(\\.\\.\\.|BR)(\\])",
          "captures": {
            "1": { "name": "punctuation.definition.begin.bracket.square.starrod" },
            "3": { "name": "punctuation.definition.end.bracket.square.starrod" }
          }
        },
        {
          "name": "keyword.other.unit.starrod",
          "match": "(\\[)(A|B|L|R|Z|C-UP|C-DOWN|C-LEFT|C-DOWN|C-UP|C-RIGHT|START|UP|DOWN|LEFT|RIGHT|NOTE|HEART|STAR|CIRCLE|CROSS)(\\])",
          "captures": {
            "1": { "name": "punctuation.definition.begin.bracket.square.starrod" },
            "3": { "name": "punctuation.definition.end.bracket.square.starrod" }
          }
        },
        {
          "name": "support.function.call.expression.starrod",
          "begin": "({)([A-Za-z0-9_]+)",
          "beginCaptures": {
            "1": { "name": "punctuation.begin.bracket.curly.starrod" },
            "2": { "name": "entity.name.function.call.starrod" }
          },
          "patterns": [
            { "include": "#comment" },
            {
              "match": "(:)([A-Fa-f0-9]+)(?=[:}])",
              "captures": {
                "1": { "name": "punctuation.separator.colon.starrod" },
                "2": { "name": "constant.numeric.hexadecimal.starrod" }
              }
            },
            {
              "match": "(:)([A-Za-z0-9_]+)(?=[:}])",
              "captures": {
                "1": { "name": "punctuation.separator.colon.starrod" }
              }
            }
          ],
          "end": "(})|$",
          "endCaptures": {
            "1": { "name": "punctuation.end.bracket.curly.starrod" }
          }
        },
        {
          "name": "support.function.call.expression.starrod",
          "begin": "(\\[)([A-Za-z0-9_]+)",
          "beginCaptures": {
            "1": { "name": "punctuation.begin.bracket.square.starrod" },
            "2": { "name": "entity.name.function.call.starrod" }
          },
          "patterns": [
            { "include": "#comment" },
            {
              "match": "(:)([A-Fa-f0-9]+)(?=[:\\]])",
              "captures": {
                "1": { "name": "punctuation.separator.colon.starrod" },
                "2": { "name": "constant.numeric.hexadecimal.starrod" }
              }
            },
            {
              "match": "(:)([A-Za-z0-9_]+)(?=[:\\]])",
              "captures": {
                "1": { "name": "punctuation.separator.colon.starrod" }
              }
            }
          ],
          "end": "(\\])|$",
          "endCaptures": {
            "1": { "name": "punctuation.end.bracket.square.starrod" }
          }
        },
        {
          "match": "(\\[)(END)(\\])",
          "captures": {
            "0": { "name": "keyword.control.string.end.starrod" },
            "1": { "name": "punctuation.definition.begin.bracket.square.starrod" },
            "3": { "name": "punctuation.definition.end.bracket.square.starrod" }
          }
        },
        { "include": "#comment" }
      ]
    },
    "data": {
      "patterns": [
        {
          "name": "variable.other.property.offset.starrod",
          "match": "^\\s*(\\[)[^ \t$#/%\\(\\[]+(\\])",
          "captures": {
            "1": { "name": "punctuation.definition.begin.bracket.square.starrod" },
            "2": { "name": "punctuation.definition.end.bracket.square.starrod" }
          }
        },
        { "include": "#expression" },
        { "include": "#comment" }
      ]
    },
    "expression": {
      "patterns": [
        {
          "name": "support.function.call.expression.starrod",
          "begin": "({)([A-Za-z0-9_]+)",
          "beginCaptures": {
            "1": { "name": "punctuation.begin.bracket.curly.starrod" },
            "2": { "name": "entity.name.function.call.starrod" }
          },
          "patterns": [
            { "include": "#comment" },
            {
              "match": "(:)([A-Fa-f0-9]+)(?=[:}])",
              "captures": {
                "1": { "name": "punctuation.separator.colon.starrod" },
                "2": { "name": "constant.numeric.hexadecimal.starrod" }
              }
            },
            {
              "match": "(:)([A-Za-z0-9_]+)(?=[:}])",
              "captures": {
                "1": { "name": "punctuation.separator.colon.starrod" }
              }
            }
          ],
          "end": "(})|$",
          "endCaptures": {
            "1": { "name": "punctuation.end.bracket.curly.starrod" }
          }
        },
        {
          "name": "support.function.call.expression.starrod",
          "begin": "(~)([A-Za-z0-9_]+)",
          "beginCaptures": {
            "1": { "name": "punctuation.begin.bracket.curly.starrod" },
            "2": { "name": "entity.name.function.call.starrod" }
          },
          "patterns": [
            { "include": "#comment" },
            {
              "name": "punctuation.separator.colon.starrod",
              "match": ":"
            },
            {
              "match": "(:)([A-Fa-f0-9]+)(?=[:}])",
              "captures": {
                "1": { "name": "punctuation.separator.colon.starrod" },
                "2": { "name": "constant.numeric.hexadecimal.starrod" }
              }
            },
            {
              "match": "(:)([A-Za-z0-9_?]+)(?=[:}])",
              "captures": {
                "1": { "name": "punctuation.separator.colon.starrod" }
              }
            }
          ],
          "end": "(?=\\s)|$"
        },
        { "include": "#identifier" },
        { "include": "#number" },
        { "include": "#string" }
      ]
    },
    "set_expression": {
      "patterns": [
        { "include": "#expression" },
        {
          "name": "punctuation.separator.delimiter.comma.starrod",
          "match": ","
        },
        {
          "name": "keyword.operator.assignment.starrod",
          "match": "="
        },
        {
          "name": "keyword.operator.arithmetic.starrod",
          "match": "[+\\-*]|/(?!%)"
        },
        {
          "begin": "(mod)(\\()",
          "beginCaptures": {
            "1": { "name": "support.function.call.mod.starrod" },
            "2": { "name": "punctuation.section.arguments.begin.bracket.round.function.call.starrod" }
          },
          "patterns": [
            { "include": "#set_expression" }
          ],
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.section.arguments.end.bracket.round.function.call.starrod" }
          }
        },
        { "include": "#comment" }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "match": "(\\.)(True|False)",
          "captures": {
            "0": { "name": "constant.language.boolean.starrod" },
            "1": { "name": "punctuation.separator.dot-access.starrod" }
          }
        },
        {
          "match": "(\\.)(Default)",
          "captures": {
            "0": { "name": "constant.language.default.starrod" },
            "1": { "name": "punctuation.separator.dot-access.starrod" }
          }
        },
        {
          "match": "(\\.)(\\S+)(:)(\\S+)",
          "captures": {
            "0": { "name": "support.constant.enum.starrod" },
            "1": { "name": "punctuation.separator.dot-access.starrod" },
            "2": { "name": "entity.name.scope-resolution.starrod" },
            "3": { "name": "punctuation.separator.namespace.access.starrod" },
            "4": { "name": "support.constant.enum.variant.starrod" }
          }
        },
        {
          "match": "(\\.)(\\S+)",
          "captures": {
            "0": { "name": "constant.other.starrod" },
            "1": { "name": "punctuation.separator.dot-access.starrod" }
          }
        },
        {
          "match": "((\\*)((Var|Flag|MapVar|MapFlag|AreaByte|AreaFlag|GameFlag|GameByte|ModFlag|ModByte|Array|FlagArray)|([^ \t$#/%:\\(\\[]+)))((\\[)([0-9A-Fa-f]+)(\\]))?\\b",
          "captures": {
            "2": { "name": "punctuation.asterisk.starrod" },
            "4": { "name": "variable.language.starrod" },
            "5": { "name": "variable.name.starrod" },
            "6": { "name": "meta.bracket.square.access.starrod" },
            "7": { "name": "punctuation.definition.begin.bracket.square.starrod" },
            "8": { "name": "constant.numeric.hexadecimal" },
            "9": { "name": "punctuation.definition.end.bracket.square.starrod" }
          }
        },
        {
          "match": "((\\$)[^ \t$#/%:\\(\\[]+((:)[^ \t$#/%\\(\\[]+)?)((\\[)([0-9A-Fa-f]+)(\\]))?",
          "captures": {
            "1": { "name": "entity.name.starrod" },
            "2": { "name": "punctuation.variable.starrod" },
            "4": { "name": "punctuation.separator.namespace.access.starrod" },
            "5": { "name": "meta.bracket.square.access.starrod" },
            "6": { "name": "punctuation.definition.begin.bracket.square.starrod" },
            "7": { "name": "constant.numeric.hexadecimal" },
            "8": { "name": "punctuation.definition.end.bracket.square.starrod" }
          }
        },
        {
          "name": "constant.numeric.offset.starrod",
          "match": "^\\s*[a-zA-Z0-9]+(\\:)",
          "captures": {
            "1": { "name": "punctuation.separator.colon.starrod" }
          }
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.float.starrod",
          "match": "(\\b|-)[0-9]+\\.[0-9]+(d)?(\\s|$)",
          "captures": {
            "2": { "name": "storage.type.numeric.starrod" }
          }
        },
        {
          "name": "constant.numeric.decimal.starrod",
          "match": "(\\b|-)[0-9]+(`)(b|s)?(\\s|$)",
          "captures": {
            "2": { "name": "keyword.other.unit.suffix.starrod" },
            "3": { "name": "storage.type.numeric.starrod" }
          }
        },
        {
          "match": "(\\b|-)([0-9A-F]{1,8})[^`\\w]",
          "captures": {
            "2": { "name": "constant.numeric.hexadecimal.starrod" }
          }
        },
        {
          "match": "(\\b|-)([0-9A-F]{9,})[^`\\w]",
          "captures": {
            "2": { "name": "invalid.constant.numeric.hexadecimal.starrod" }
          }
        },
        {
          "name": "constant.numeric.hexadecimal.short.starrod",
          "match": "(\\b|-)[0-9A-F]{1,4}(s)(\\s|$)",
          "captures": {
            "2": { "name": "storage.type.numeric.starrod" }
          }
        },
        {
          "name": "invalid.constant.numeric.hexadecimal.short.starrod",
          "match": "(\\b|-)[0-9A-F]{5,}(s)(\\s|$)"
        },
        {
          "name": "constant.numeric.hexadecimal.byte.starrod",
          "match": "(\\b|-)[0-9A-F]{1,2}(b)(\\s|$)",
          "captures": {
            "2": { "name": "storage.type.numeric.starrod" }
          }
        },
        {
          "name": "invalid.constant.numeric.hexidecimal.byte.starrod",
          "match": "(\\b|-)[0-9A-F]{3,}(b)(\\s|$)"
        }
      ]
    },
    "string": {
      "name": "string.quoted.double.starrod",
      "begin": "\"",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.starrod" }
      },
      "patterns": [
        {
          "name": "constant.character.escape.starrod",
          "match": "\\\\."
        }
      ],
      "end": "\"",
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.end.starrod" }
      }
    }
  }
}
